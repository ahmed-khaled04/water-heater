
AMIT3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  000022f4  00002388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800180  00800180  000024a8  2**0
                  ALLOC
  3 .stab         000027a8  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000152a  00000000  00000000  00004c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000617a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000631a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000650c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008917  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ae74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b32a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__vector_1>
       8:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__vector_2>
       c:	0c 94 85 08 	jmp	0x110a	; 0x110a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <main>
      8a:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_int.h"


void PORT_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	*(DIO_DDRA_REG) = PORTA_DIR;
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8c e5       	ldi	r24, 0x5C	; 92
     e3c:	80 83       	st	Z, r24
	*(DIO_DDRB_REG) = PORTB_DIR;
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8d ef       	ldi	r24, 0xFD	; 253
     e44:	80 83       	st	Z, r24
	*(DIO_DDRC_REG) = PORTC_DIR;
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	80 83       	st	Z, r24
	*(DIO_DDRD_REG) = PORTD_DIR;
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	80 83       	st	Z, r24


	*(DIO_PORTA_REG) = PORTA_INITIAL_VAL;
     e56:	eb e3       	ldi	r30, 0x3B	; 59
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 83       	st	Z, r24
	*(DIO_PORTB_REG) = PORTB_INITIAL_VAL;
     e5e:	e8 e3       	ldi	r30, 0x38	; 56
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	10 82       	st	Z, r1
	*(DIO_PORTC_REG) = PORTC_INITIAL_VAL;
     e64:	e5 e3       	ldi	r30, 0x35	; 53
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	10 82       	st	Z, r1
	*(DIO_PORTD_REG) = PORTD_INITIAL_VAL;
     e6a:	e2 e3       	ldi	r30, 0x32	; 50
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	10 82       	st	Z, r1
}
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <GIE_voidEnableGlobalInterrupt>:
#include "../../Service/bit_math.h"
#include "GIE_int.h"



void GIE_voidEnableGlobalInterrupt(){
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
	__asm__("SEI");
     e7e:	78 94       	sei


//	SET_BIT(SREG_REG,GIE_BIT);
}
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <GIE_voidDisableGlobalInterrupt>:
void GIE_voidDisableGlobalInterrupt(){
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
	__asm__("CLI");
     e8e:	f8 94       	cli

//	CLR_BIT(SREG_REG,GIE_BIT);
}
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <EXTI_EnableINT0>:

static void (*INT0_Handler)(void);
static void (*INT1_Handler)(void);
static void (*INT2_Handler)(void);

void EXTI_EnableINT0(void){
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	//set int0 bit
	SET_BIT(EXTI_GICR_REG,EXTI_GICR_INT0);
     e9e:	ab e5       	ldi	r26, 0x5B	; 91
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	eb e5       	ldi	r30, 0x5B	; 91
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 64       	ori	r24, 0x40	; 64
     eaa:	8c 93       	st	X, r24
}
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <EXTI_EnableINT1>:
void EXTI_EnableINT1(void){
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR_REG,EXTI_GICR_INT1);
     eba:	ab e5       	ldi	r26, 0x5B	; 91
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	eb e5       	ldi	r30, 0x5B	; 91
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 68       	ori	r24, 0x80	; 128
     ec6:	8c 93       	st	X, r24
}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <EXTI_EnableINT2>:
void EXTI_EnableINT2(void){
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR_REG,EXTI_GICR_INT2);
     ed6:	ab e5       	ldi	r26, 0x5B	; 91
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	eb e5       	ldi	r30, 0x5B	; 91
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 62       	ori	r24, 0x20	; 32
     ee2:	8c 93       	st	X, r24
}
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <EXTI_DisableINT0>:
void EXTI_DisableINT0(void){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR_REG,EXTI_GICR_INT0);
     ef2:	ab e5       	ldi	r26, 0x5B	; 91
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	eb e5       	ldi	r30, 0x5B	; 91
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 7b       	andi	r24, 0xBF	; 191
     efe:	8c 93       	st	X, r24
}
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <EXTI_DisableINT1>:
void EXTI_DisableINT1(void){
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(EXTI_GICR_REG,EXTI_GICR_INT1);
     f0e:	ab e5       	ldi	r26, 0x5B	; 91
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	eb e5       	ldi	r30, 0x5B	; 91
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 77       	andi	r24, 0x7F	; 127
     f1a:	8c 93       	st	X, r24
}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <EXTI_DisableINT2>:
void EXTI_DisableINT2(void){
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(EXTI_GICR_REG,EXTI_GICR_INT2);
     f2a:	ab e5       	ldi	r26, 0x5B	; 91
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e5       	ldi	r30, 0x5B	; 91
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8f 7d       	andi	r24, 0xDF	; 223
     f36:	8c 93       	st	X, r24
}
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <EXTI_InitINT0>:

void EXTI_InitINT0(){
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
	//	choose sense control
#if EXTI_INT_0_SENSE == EXTI_RISIG_EDGE
	SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC00);
     f46:	a5 e5       	ldi	r26, 0x55	; 85
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e5 e5       	ldi	r30, 0x55	; 85
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	81 60       	ori	r24, 0x01	; 1
     f52:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC01);
     f54:	a5 e5       	ldi	r26, 0x55	; 85
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e5 e5       	ldi	r30, 0x55	; 85
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	82 60       	ori	r24, 0x02	; 2
     f60:	8c 93       	st	X, r24
	CLR_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC01);
#else
#warning "Wrong INT0 sense control "
#endif
	//	enable
	EXTI_EnableINT0();
     f62:	0e 94 4b 07 	call	0xe96	; 0xe96 <EXTI_EnableINT0>
}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <EXTI_InitINT1>:
void EXTI_InitINT1(){
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	//	choose sense control
#if EXTI_INT_1_SENSE == EXTI_RISIG_EDGE
	SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC10);
     f74:	a5 e5       	ldi	r26, 0x55	; 85
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e5       	ldi	r30, 0x55	; 85
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	84 60       	ori	r24, 0x04	; 4
     f80:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC11);
     f82:	a5 e5       	ldi	r26, 0x55	; 85
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e5       	ldi	r30, 0x55	; 85
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	88 60       	ori	r24, 0x08	; 8
     f8e:	8c 93       	st	X, r24
	CLR_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC11);
#else
#warning "Wrong INT1 sense control "
#endif

	EXTI_EnableINT1();
     f90:	0e 94 59 07 	call	0xeb2	; 0xeb2 <EXTI_EnableINT1>
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <EXTI_InitINT2>:
void EXTI_InitINT2(){
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT_2_SENSE  == EXTI_RISIG_EDGE
	SET_BIT(EXTI_MCUCSR_REG,EXTI_MCUCSR_ISC2);
     fa2:	a4 e5       	ldi	r26, 0x54	; 84
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e4 e5       	ldi	r30, 0x54	; 84
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 64       	ori	r24, 0x40	; 64
     fae:	8c 93       	st	X, r24
	CLR_BIT(EXTI_MCUCSR_REG,EXTI_MCUCSR_ISC2);
#else
#warning "Wrong INT2 sense control "
#endif

	EXTI_EnableINT2();
     fb0:	0e 94 67 07 	call	0xece	; 0xece <EXTI_EnableINT2>
}
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <EXTI_voidChangeSenseControl>:
void EXTI_voidChangeSenseControl(u8 Copy_u8IntNum , u8 Copy_u8Sensenum)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <EXTI_voidChangeSenseControl+0x6>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	6a 83       	std	Y+2, r22	; 0x02


}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <EXTI_voidSetINT0_Callback>:
void EXTI_voidSetINT0_Callback(void (*pf)(void))
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <EXTI_voidSetINT0_Callback+0x6>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01

	INT0_Handler = pf;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	90 93 81 01 	sts	0x0181, r25
     fe8:	80 93 80 01 	sts	0x0180, r24

}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <EXTI_voidSetINT1_Callback>:
void EXTI_voidSetINT1_Callback(void (*pf)(void))
{
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	00 d0       	rcall	.+0      	; 0xffc <EXTI_voidSetINT1_Callback+0x6>
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01

	INT1_Handler = pf;
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	90 93 83 01 	sts	0x0183, r25
    100c:	80 93 82 01 	sts	0x0182, r24

}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <EXTI_voidSetINT2_Callback>:
void EXTI_voidSetINT2_Callback(void (*pf)(void))
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <EXTI_voidSetINT2_Callback+0x6>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	9a 83       	std	Y+2, r25	; 0x02
    1026:	89 83       	std	Y+1, r24	; 0x01

	INT2_Handler = pf;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	9a 81       	ldd	r25, Y+2	; 0x02
    102c:	90 93 85 01 	sts	0x0185, r25
    1030:	80 93 84 01 	sts	0x0184, r24

}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    103e:	1f 92       	push	r1
    1040:	0f 92       	push	r0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	5f 93       	push	r21
    1050:	6f 93       	push	r22
    1052:	7f 93       	push	r23
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	af 93       	push	r26
    105a:	bf 93       	push	r27
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Handler != NULL)
    1068:	80 91 80 01 	lds	r24, 0x0180
    106c:	90 91 81 01 	lds	r25, 0x0181
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	29 f0       	breq	.+10     	; 0x107e <__vector_1+0x40>
	{

		INT0_Handler();
    1074:	e0 91 80 01 	lds	r30, 0x0180
    1078:	f0 91 81 01 	lds	r31, 0x0181
    107c:	09 95       	icall
	}
}
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <__vector_2>:
void __vector_2(void) __attribute__((signal));
void __vector_2(void){
    10a4:	1f 92       	push	r1
    10a6:	0f 92       	push	r0
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	0f 92       	push	r0
    10ac:	11 24       	eor	r1, r1
    10ae:	2f 93       	push	r18
    10b0:	3f 93       	push	r19
    10b2:	4f 93       	push	r20
    10b4:	5f 93       	push	r21
    10b6:	6f 93       	push	r22
    10b8:	7f 93       	push	r23
    10ba:	8f 93       	push	r24
    10bc:	9f 93       	push	r25
    10be:	af 93       	push	r26
    10c0:	bf 93       	push	r27
    10c2:	ef 93       	push	r30
    10c4:	ff 93       	push	r31
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Handler != NULL)
    10ce:	80 91 82 01 	lds	r24, 0x0182
    10d2:	90 91 83 01 	lds	r25, 0x0183
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	29 f0       	breq	.+10     	; 0x10e4 <__vector_2+0x40>
	{

		INT1_Handler();
    10da:	e0 91 82 01 	lds	r30, 0x0182
    10de:	f0 91 83 01 	lds	r31, 0x0183
    10e2:	09 95       	icall
	}
}
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	ff 91       	pop	r31
    10ea:	ef 91       	pop	r30
    10ec:	bf 91       	pop	r27
    10ee:	af 91       	pop	r26
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	7f 91       	pop	r23
    10f6:	6f 91       	pop	r22
    10f8:	5f 91       	pop	r21
    10fa:	4f 91       	pop	r20
    10fc:	3f 91       	pop	r19
    10fe:	2f 91       	pop	r18
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	0f 90       	pop	r0
    1106:	1f 90       	pop	r1
    1108:	18 95       	reti

0000110a <__vector_3>:
void __vector_3(void) __attribute__((signal));
void __vector_3(void){
    110a:	1f 92       	push	r1
    110c:	0f 92       	push	r0
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	0f 92       	push	r0
    1112:	11 24       	eor	r1, r1
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Handler != NULL)
    1134:	80 91 84 01 	lds	r24, 0x0184
    1138:	90 91 85 01 	lds	r25, 0x0185
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	29 f0       	breq	.+10     	; 0x114a <__vector_3+0x40>
	{

		INT2_Handler();
    1140:	e0 91 84 01 	lds	r30, 0x0184
    1144:	f0 91 85 01 	lds	r31, 0x0185
    1148:	09 95       	icall
	}
}
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	ff 91       	pop	r31
    1150:	ef 91       	pop	r30
    1152:	bf 91       	pop	r27
    1154:	af 91       	pop	r26
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	7f 91       	pop	r23
    115c:	6f 91       	pop	r22
    115e:	5f 91       	pop	r21
    1160:	4f 91       	pop	r20
    1162:	3f 91       	pop	r19
    1164:	2f 91       	pop	r18
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <DIO_voidSetPinVlaue>:
#include"DIO_priv.h"

u8 * Global_u8PORT_arr[] = {DIO_PORTA_REG , DIO_PORTB_REG ,  DIO_PORTC_REG,DIO_PORTD_REG};
u8 * Global_u8Pin_arr[] = {DIO_PINA_REG , DIO_PINB_REG ,  DIO_PINC_REG,DIO_PIND_REG};

void DIO_voidSetPinVlaue    (u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Val){
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <DIO_voidSetPinVlaue+0x6>
    1176:	0f 92       	push	r0
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	6a 83       	std	Y+2, r22	; 0x02
    1180:	4b 83       	std	Y+3, r20	; 0x03

		if(Copy_u8PinID <= DIO_PIN7 && Copy_u8PortID < 5)
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	88 30       	cpi	r24, 0x08	; 8
    1186:	08 f0       	brcs	.+2      	; 0x118a <DIO_voidSetPinVlaue+0x1a>
    1188:	54 c0       	rjmp	.+168    	; 0x1232 <DIO_voidSetPinVlaue+0xc2>
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	85 30       	cpi	r24, 0x05	; 5
    118e:	08 f0       	brcs	.+2      	; 0x1192 <DIO_voidSetPinVlaue+0x22>
    1190:	50 c0       	rjmp	.+160    	; 0x1232 <DIO_voidSetPinVlaue+0xc2>
		{

			if(Copy_u8Val == DIO_PIN_HIGH)
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	29 f5       	brne	.+74     	; 0x11e2 <DIO_voidSetPinVlaue+0x72>
			{
				SET_BIT(*(Global_u8PORT_arr[Copy_u8PortID]) ,Copy_u8PinID );
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	fc 01       	movw	r30, r24
    11a4:	e8 59       	subi	r30, 0x98	; 152
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	a0 81       	ld	r26, Z
    11aa:	b1 81       	ldd	r27, Z+1	; 0x01
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	fc 01       	movw	r30, r24
    11b8:	e8 59       	subi	r30, 0x98	; 152
    11ba:	fe 4f       	sbci	r31, 0xFE	; 254
    11bc:	01 90       	ld	r0, Z+
    11be:	f0 81       	ld	r31, Z
    11c0:	e0 2d       	mov	r30, r0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_voidSetPinVlaue+0x68>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_voidSetPinVlaue+0x64>
    11dc:	84 2b       	or	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	28 c0       	rjmp	.+80     	; 0x1232 <DIO_voidSetPinVlaue+0xc2>

			}else if(Copy_u8Val == DIO_PIN_LOW)
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	88 23       	and	r24, r24
    11e6:	29 f5       	brne	.+74     	; 0x1232 <DIO_voidSetPinVlaue+0xc2>
			{
				CLR_BIT(*(Global_u8PORT_arr[Copy_u8PortID]) ,Copy_u8PinID );
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	fc 01       	movw	r30, r24
    11f4:	e8 59       	subi	r30, 0x98	; 152
    11f6:	fe 4f       	sbci	r31, 0xFE	; 254
    11f8:	a0 81       	ld	r26, Z
    11fa:	b1 81       	ldd	r27, Z+1	; 0x01
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	fc 01       	movw	r30, r24
    1208:	e8 59       	subi	r30, 0x98	; 152
    120a:	fe 4f       	sbci	r31, 0xFE	; 254
    120c:	01 90       	ld	r0, Z+
    120e:	f0 81       	ld	r31, Z
    1210:	e0 2d       	mov	r30, r0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_voidSetPinVlaue+0xb8>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_voidSetPinVlaue+0xb4>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
			}
			else{
			}
		}
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <DIO_u8GetPinValue>:

u8   DIO_u8GetPinValue      (u8 Copy_u8PortID, u8 Copy_u8PinID ){
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <DIO_u8GetPinValue+0x6>
    1244:	0f 92       	push	r0
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	8a 83       	std	Y+2, r24	; 0x02
    124c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8State = 0xff ;
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_u8PinID <= DIO_PIN7 && Copy_u8PortID < 5)
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	88 30       	cpi	r24, 0x08	; 8
    1256:	e8 f4       	brcc	.+58     	; 0x1292 <DIO_u8GetPinValue+0x54>
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	85 30       	cpi	r24, 0x05	; 5
    125c:	d0 f4       	brcc	.+52     	; 0x1292 <DIO_u8GetPinValue+0x54>
		{
			Local_u8State = GET_BIT(*(Global_u8Pin_arr[Copy_u8PortID]),Copy_u8PinID);
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	88 2f       	mov	r24, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	fc 01       	movw	r30, r24
    126a:	e0 59       	subi	r30, 0x90	; 144
    126c:	fe 4f       	sbci	r31, 0xFE	; 254
    126e:	01 90       	ld	r0, Z+
    1270:	f0 81       	ld	r31, Z
    1272:	e0 2d       	mov	r30, r0
    1274:	80 81       	ld	r24, Z
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a9 01       	movw	r20, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_u8GetPinValue+0x4a>
    1284:	55 95       	asr	r21
    1286:	47 95       	ror	r20
    1288:	8a 95       	dec	r24
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_u8GetPinValue+0x46>
    128c:	ca 01       	movw	r24, r20
    128e:	81 70       	andi	r24, 0x01	; 1
    1290:	89 83       	std	Y+1, r24	; 0x01
		}else{

		}

	return Local_u8State ;
    1292:	89 81       	ldd	r24, Y+1	; 0x01
}
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <DIO_voidSetPortVlaue>:
void DIO_voidSetPortVlaue    (u8 Copy_u8PortID, u8 Copy_u8Val){
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <DIO_voidSetPortVlaue+0x6>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	6a 83       	std	Y+2, r22	; 0x02
	if( Copy_u8PortID < 5)
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	85 30       	cpi	r24, 0x05	; 5
    12b2:	68 f4       	brcc	.+26     	; 0x12ce <DIO_voidSetPortVlaue+0x2e>
	{
		*(Global_u8PORT_arr[Copy_u8PortID]) = Copy_u8Val;
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	fc 01       	movw	r30, r24
    12c0:	e8 59       	subi	r30, 0x98	; 152
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	01 90       	ld	r0, Z+
    12c6:	f0 81       	ld	r31, Z
    12c8:	e0 2d       	mov	r30, r0
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	80 83       	st	Z, r24
	}else{

	}

}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <DIO_u8GetPortValue>:
u8   DIO_u8GetPortValue (u8 Copy_u8PortID)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	0f 92       	push	r0
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	89 83       	std	Y+1, r24	; 0x01
	return * Global_u8Pin_arr[Copy_u8PortID];
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	fc 01       	movw	r30, r24
    12f0:	e0 59       	subi	r30, 0x90	; 144
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	01 90       	ld	r0, Z+
    12f6:	f0 81       	ld	r31, Z
    12f8:	e0 2d       	mov	r30, r0
    12fa:	80 81       	ld	r24, Z
}
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <ADC_voidInit>:
#include "ADC_priv.h"
#include "ADC_int.h"



void ADC_voidInit(){
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62


	SET_BIT(ADC_ADCSRA_REG, ADC_ADCSRA_ADPS0);
    130c:	a6 e2       	ldi	r26, 0x26	; 38
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e6 e2       	ldi	r30, 0x26	; 38
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	81 60       	ori	r24, 0x01	; 1
    1318:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA_REG, ADC_ADCSRA_ADPS1);
    131a:	a6 e2       	ldi	r26, 0x26	; 38
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e6 e2       	ldi	r30, 0x26	; 38
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	82 60       	ori	r24, 0x02	; 2
    1326:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA_REG, ADC_ADCSRA_ADPS2);
    1328:	a6 e2       	ldi	r26, 0x26	; 38
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e6 e2       	ldi	r30, 0x26	; 38
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	84 60       	ori	r24, 0x04	; 4
    1334:	8c 93       	st	X, r24

//	select ADC Reference
//	AVCC ,, AREF , 2.56
//	choose AVCC
	SET_BIT(ADC_ADMUX_REG,ADC_ADMUX_REFS0);
    1336:	a7 e2       	ldi	r26, 0x27	; 39
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e7 e2       	ldi	r30, 0x27	; 39
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	80 64       	ori	r24, 0x40	; 64
    1342:	8c 93       	st	X, r24
	CLR_BIT(ADC_ADMUX_REG,ADC_ADMUX_REFS1);
    1344:	a7 e2       	ldi	r26, 0x27	; 39
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e7 e2       	ldi	r30, 0x27	; 39
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8f 77       	andi	r24, 0x7F	; 127
    1350:	8c 93       	st	X, r24

//	enable ADC
	SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADEN);
    1352:	a6 e2       	ldi	r26, 0x26	; 38
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e6 e2       	ldi	r30, 0x26	; 38
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	80 68       	ori	r24, 0x80	; 128
    135e:	8c 93       	st	X, r24
}
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <ADC_u16StartConversion>:

u16 ADC_u16StartConversion(u8 Copy_u8ChannelID)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	89 83       	std	Y+1, r24	; 0x01
//	select channel
	if(Copy_u8ChannelID <= 0b00011111)
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	80 32       	cpi	r24, 0x20	; 32
    1376:	78 f4       	brcc	.+30     	; 0x1396 <ADC_u16StartConversion+0x30>
	{
		ADC_ADMUX_REG &= ADC_PRESCALER_MASK;
    1378:	a7 e2       	ldi	r26, 0x27	; 39
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e7 e2       	ldi	r30, 0x27	; 39
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 7e       	andi	r24, 0xE0	; 224
    1384:	8c 93       	st	X, r24
		ADC_ADMUX_REG |= Copy_u8ChannelID;
    1386:	a7 e2       	ldi	r26, 0x27	; 39
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e7 e2       	ldi	r30, 0x27	; 39
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	90 81       	ld	r25, Z
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	89 2b       	or	r24, r25
    1394:	8c 93       	st	X, r24
	}

//	start conversion
	SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADSC);
    1396:	a6 e2       	ldi	r26, 0x26	; 38
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e6 e2       	ldi	r30, 0x26	; 38
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 64       	ori	r24, 0x40	; 64
    13a2:	8c 93       	st	X, r24

//	wait on flag
	while(GET_BIT(ADC_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0);
    13a4:	e6 e2       	ldi	r30, 0x26	; 38
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	82 95       	swap	r24
    13ac:	8f 70       	andi	r24, 0x0F	; 15
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	81 70       	andi	r24, 0x01	; 1
    13b4:	90 70       	andi	r25, 0x00	; 0
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	a9 f3       	breq	.-22     	; 0x13a4 <ADC_u16StartConversion+0x3e>

//	clear flag
	SET_BIT(ADC_ADCSRA_REG, ADC_ADCSRA_ADIF);
    13ba:	a6 e2       	ldi	r26, 0x26	; 38
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e6 e2       	ldi	r30, 0x26	; 38
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	80 61       	ori	r24, 0x10	; 16
    13c6:	8c 93       	st	X, r24
//	set ADIF

//	retrun ADC data reg
	return ADC_ADC_REG;
    13c8:	e4 e2       	ldi	r30, 0x24	; 36
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01

}
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <SSEG_voidEnable>:
#include "../../Service/bit_math.h"
#include "../../MCAl/DIO/DIO_int.h"
#include "SSEG_int.h"


void SSEG_voidEnable(SSEG_t * Copy_u8Seg){
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <SSEG_voidEnable+0x6>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinVlaue(Copy_u8Seg->SSEG_u8EnPort ,Copy_u8Seg->SSEG_u8EnPin , DIO_PIN_HIGH);
    13e6:	e9 81       	ldd	r30, Y+1	; 0x01
    13e8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ea:	85 81       	ldd	r24, Z+5	; 0x05
    13ec:	e9 81       	ldd	r30, Y+1	; 0x01
    13ee:	fa 81       	ldd	r31, Y+2	; 0x02
    13f0:	96 81       	ldd	r25, Z+6	; 0x06
    13f2:	69 2f       	mov	r22, r25
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
}
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <SSEG_voidDisable>:
void SSEG_voidDisable(SSEG_t * Copy_u8Seg){
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <SSEG_voidDisable+0x6>
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	9a 83       	std	Y+2, r25	; 0x02
    1410:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinVlaue(Copy_u8Seg->SSEG_u8EnPort ,Copy_u8Seg->SSEG_u8EnPin , DIO_PIN_LOW);
    1412:	e9 81       	ldd	r30, Y+1	; 0x01
    1414:	fa 81       	ldd	r31, Y+2	; 0x02
    1416:	85 81       	ldd	r24, Z+5	; 0x05
    1418:	e9 81       	ldd	r30, Y+1	; 0x01
    141a:	fa 81       	ldd	r31, Y+2	; 0x02
    141c:	96 81       	ldd	r25, Z+6	; 0x06
    141e:	69 2f       	mov	r22, r25
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>

}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <SSEG_voidWirteNum>:
void SSEG_voidWirteNum(u8 Copy_u8num , SSEG_t * Copy_u8Seg){
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <SSEG_voidWirteNum+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <SSEG_voidWirteNum+0x8>
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	8a 83       	std	Y+2, r24	; 0x02
    143e:	7c 83       	std	Y+4, r23	; 0x04
    1440:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 i = 0 ; i< 4 ; i++)
    1442:	19 82       	std	Y+1, r1	; 0x01
    1444:	24 c0       	rjmp	.+72     	; 0x148e <SSEG_voidWirteNum+0x5e>
	{

		DIO_voidSetPinVlaue(Copy_u8Seg->SSEG_u8DataPort , Copy_u8Seg->SSEG_u8DataPinarr[i] , GET_BIT(Copy_u8num , i));
    1446:	eb 81       	ldd	r30, Y+3	; 0x03
    1448:	fc 81       	ldd	r31, Y+4	; 0x04
    144a:	50 81       	ld	r21, Z
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	82 0f       	add	r24, r18
    1458:	93 1f       	adc	r25, r19
    145a:	fc 01       	movw	r30, r24
    145c:	31 96       	adiw	r30, 0x01	; 1
    145e:	40 81       	ld	r20, Z
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	b9 01       	movw	r22, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <SSEG_voidWirteNum+0x44>
    1470:	75 95       	asr	r23
    1472:	67 95       	ror	r22
    1474:	8a 95       	dec	r24
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <SSEG_voidWirteNum+0x40>
    1478:	cb 01       	movw	r24, r22
    147a:	98 2f       	mov	r25, r24
    147c:	91 70       	andi	r25, 0x01	; 1
    147e:	85 2f       	mov	r24, r21
    1480:	64 2f       	mov	r22, r20
    1482:	49 2f       	mov	r20, r25
    1484:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
void SSEG_voidDisable(SSEG_t * Copy_u8Seg){
	DIO_voidSetPinVlaue(Copy_u8Seg->SSEG_u8EnPort ,Copy_u8Seg->SSEG_u8EnPin , DIO_PIN_LOW);

}
void SSEG_voidWirteNum(u8 Copy_u8num , SSEG_t * Copy_u8Seg){
	for(u8 i = 0 ; i< 4 ; i++)
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	8f 5f       	subi	r24, 0xFF	; 255
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	84 30       	cpi	r24, 0x04	; 4
    1492:	c8 f2       	brcs	.-78     	; 0x1446 <SSEG_voidWirteNum+0x16>
	{

		DIO_voidSetPinVlaue(Copy_u8Seg->SSEG_u8DataPort , Copy_u8Seg->SSEG_u8DataPinarr[i] , GET_BIT(Copy_u8num , i));
	}
}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <SSEG_voidWriteOnTwo>:

void SSEG_voidWriteOnTwo(u8 Copy_u8num , SSEG_t * Copy_u8Seg1 , SSEG_t * Copy_u8Seg2){
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <SSEG_voidWriteOnTwo+0x6>
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <SSEG_voidWriteOnTwo+0x8>
    14aa:	0f 92       	push	r0
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	7b 83       	std	Y+3, r23	; 0x03
    14b4:	6a 83       	std	Y+2, r22	; 0x02
    14b6:	5d 83       	std	Y+5, r21	; 0x05
    14b8:	4c 83       	std	Y+4, r20	; 0x04
	Copy_u8num = intToBCD(Copy_u8num);
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <intToBCD>
    14c0:	89 83       	std	Y+1, r24	; 0x01
	SSEG_voidWirteNum((Copy_u8num & 0x0F) , Copy_u8Seg2);
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	8f 70       	andi	r24, 0x0F	; 15
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ca:	b9 01       	movw	r22, r18
    14cc:	0e 94 18 0a 	call	0x1430	; 0x1430 <SSEG_voidWirteNum>
	SSEG_voidWirteNum((Copy_u8num >> 4) , Copy_u8Seg1);
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	82 95       	swap	r24
    14d4:	8f 70       	andi	r24, 0x0F	; 15
    14d6:	2a 81       	ldd	r18, Y+2	; 0x02
    14d8:	3b 81       	ldd	r19, Y+3	; 0x03
    14da:	b9 01       	movw	r22, r18
    14dc:	0e 94 18 0a 	call	0x1430	; 0x1430 <SSEG_voidWirteNum>

}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <intToBCD>:


u8 intToBCD(u8 num) {
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <intToBCD+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <intToBCD+0x8>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    if (num > 99) return 0;  // Ensure it's within the valid range (0-99)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	84 36       	cpi	r24, 0x64	; 100
    1502:	10 f0       	brcs	.+4      	; 0x1508 <intToBCD+0x18>
    1504:	1c 82       	std	Y+4, r1	; 0x04
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <intToBCD+0x40>

    u8 tens = (num / 10) << 4;  // Shift the tens digit to the upper 4 bits
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9a e0       	ldi	r25, 0x0A	; 10
    150c:	69 2f       	mov	r22, r25
    150e:	0e 94 21 11 	call	0x2242	; 0x2242 <__udivmodqi4>
    1512:	82 95       	swap	r24
    1514:	80 7f       	andi	r24, 0xF0	; 240
    1516:	8a 83       	std	Y+2, r24	; 0x02
    u8 ones = num % 10;         // Keep the ones digit in the lower 4 bits
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9a e0       	ldi	r25, 0x0A	; 10
    151c:	69 2f       	mov	r22, r25
    151e:	0e 94 21 11 	call	0x2242	; 0x2242 <__udivmodqi4>
    1522:	89 2f       	mov	r24, r25
    1524:	89 83       	std	Y+1, r24	; 0x01

    return (tens | ones); // Combine both into a single BCD byte
    1526:	9a 81       	ldd	r25, Y+2	; 0x02
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	29 2f       	mov	r18, r25
    152c:	28 2b       	or	r18, r24
    152e:	2c 83       	std	Y+4, r18	; 0x04
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <KPAD_voidGetKeyPressed>:
u8 KPAD_COL_arr[KPAD_U8_COL_SIZE]= {KPAD_U8_COL_PIN0,KPAD_U8_COL_PIN1,KPAD_U8_COL_PIN2,KPAD_U8_COL_PIN3};
u8 KPAD_ROW_arr[KPAD_U8_ROW_SIZE]= {KPAD_U8_ROW_PIN0,KPAD_U8_ROW_PIN1,KPAD_U8_ROW_PIN2,KPAD_U8_ROW_PIN3};



void KPAD_voidGetKeyPressed(u8 * Copy_u8RowIndex , u8* Copy_u8ColIndex){
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <KPAD_voidGetKeyPressed+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <KPAD_voidGetKeyPressed+0x8>
    1548:	00 d0       	rcall	.+0      	; 0x154a <KPAD_voidGetKeyPressed+0xa>
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	9c 83       	std	Y+4, r25	; 0x04
    1550:	8b 83       	std	Y+3, r24	; 0x03
    1552:	7e 83       	std	Y+6, r23	; 0x06
    1554:	6d 83       	std	Y+5, r22	; 0x05
	*Copy_u8ColIndex =0xff;
    1556:	ed 81       	ldd	r30, Y+5	; 0x05
    1558:	fe 81       	ldd	r31, Y+6	; 0x06
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	80 83       	st	Z, r24
	*Copy_u8RowIndex =0xff;
    155e:	eb 81       	ldd	r30, Y+3	; 0x03
    1560:	fc 81       	ldd	r31, Y+4	; 0x04
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	80 83       	st	Z, r24
	u8 Local_u8RowCounter ,Local_u8ColCounter ;
	for(Local_u8ColCounter = 0 ; Local_u8ColCounter< KPAD_U8_COL_SIZE ; Local_u8ColCounter++)
    1566:	19 82       	std	Y+1, r1	; 0x01
    1568:	47 c0       	rjmp	.+142    	; 0x15f8 <KPAD_voidGetKeyPressed+0xb8>
	{
		DIO_voidSetPinVlaue(KPAD_U8_COL_PORT,KPAD_COL_arr[Local_u8ColCounter],DIO_PIN_LOW);
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	fc 01       	movw	r30, r24
    1572:	e8 58       	subi	r30, 0x88	; 136
    1574:	fe 4f       	sbci	r31, 0xFE	; 254
    1576:	90 81       	ld	r25, Z
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	69 2f       	mov	r22, r25
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
		for(Local_u8RowCounter = 0 ; Local_u8RowCounter < KPAD_U8_ROW_SIZE ; Local_u8RowCounter++){
    1582:	1a 82       	std	Y+2, r1	; 0x02
    1584:	27 c0       	rjmp	.+78     	; 0x15d4 <KPAD_voidGetKeyPressed+0x94>

			if (DIO_u8GetPinValue(KPAD_U8_ROW_PORT,KPAD_ROW_arr[Local_u8RowCounter]) == DIO_PIN_LOW)
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	fc 01       	movw	r30, r24
    158e:	e4 58       	subi	r30, 0x84	; 132
    1590:	fe 4f       	sbci	r31, 0xFE	; 254
    1592:	90 81       	ld	r25, Z
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	69 2f       	mov	r22, r25
    1598:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_u8GetPinValue>
    159c:	88 23       	and	r24, r24
    159e:	b9 f4       	brne	.+46     	; 0x15ce <KPAD_voidGetKeyPressed+0x8e>
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <KPAD_voidGetKeyPressed+0x6a>
			{
				while(DIO_u8GetPinValue(KPAD_U8_ROW_PORT,KPAD_ROW_arr[Local_u8RowCounter]) == DIO_PIN_LOW)
				*Copy_u8ColIndex = Local_u8ColCounter;
    15a2:	ed 81       	ldd	r30, Y+5	; 0x05
    15a4:	fe 81       	ldd	r31, Y+6	; 0x06
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	80 83       	st	Z, r24
		DIO_voidSetPinVlaue(KPAD_U8_COL_PORT,KPAD_COL_arr[Local_u8ColCounter],DIO_PIN_LOW);
		for(Local_u8RowCounter = 0 ; Local_u8RowCounter < KPAD_U8_ROW_SIZE ; Local_u8RowCounter++){

			if (DIO_u8GetPinValue(KPAD_U8_ROW_PORT,KPAD_ROW_arr[Local_u8RowCounter]) == DIO_PIN_LOW)
			{
				while(DIO_u8GetPinValue(KPAD_U8_ROW_PORT,KPAD_ROW_arr[Local_u8RowCounter]) == DIO_PIN_LOW)
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	fc 01       	movw	r30, r24
    15b2:	e4 58       	subi	r30, 0x84	; 132
    15b4:	fe 4f       	sbci	r31, 0xFE	; 254
    15b6:	90 81       	ld	r25, Z
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	69 2f       	mov	r22, r25
    15bc:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_u8GetPinValue>
    15c0:	88 23       	and	r24, r24
    15c2:	79 f3       	breq	.-34     	; 0x15a2 <KPAD_voidGetKeyPressed+0x62>
				*Copy_u8ColIndex = Local_u8ColCounter;
				*Copy_u8RowIndex = Local_u8RowCounter;
    15c4:	eb 81       	ldd	r30, Y+3	; 0x03
    15c6:	fc 81       	ldd	r31, Y+4	; 0x04
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	80 83       	st	Z, r24
    15cc:	19 c0       	rjmp	.+50     	; 0x1600 <KPAD_voidGetKeyPressed+0xc0>
	*Copy_u8RowIndex =0xff;
	u8 Local_u8RowCounter ,Local_u8ColCounter ;
	for(Local_u8ColCounter = 0 ; Local_u8ColCounter< KPAD_U8_COL_SIZE ; Local_u8ColCounter++)
	{
		DIO_voidSetPinVlaue(KPAD_U8_COL_PORT,KPAD_COL_arr[Local_u8ColCounter],DIO_PIN_LOW);
		for(Local_u8RowCounter = 0 ; Local_u8RowCounter < KPAD_U8_ROW_SIZE ; Local_u8RowCounter++){
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	8f 5f       	subi	r24, 0xFF	; 255
    15d2:	8a 83       	std	Y+2, r24	; 0x02
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	84 30       	cpi	r24, 0x04	; 4
    15d8:	b0 f2       	brcs	.-84     	; 0x1586 <KPAD_voidGetKeyPressed+0x46>
				*Copy_u8ColIndex = Local_u8ColCounter;
				*Copy_u8RowIndex = Local_u8RowCounter;
				return ;
			}
		}
		DIO_voidSetPinVlaue(KPAD_U8_COL_PORT,KPAD_COL_arr[Local_u8ColCounter],DIO_PIN_HIGH);
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	fc 01       	movw	r30, r24
    15e2:	e8 58       	subi	r30, 0x88	; 136
    15e4:	fe 4f       	sbci	r31, 0xFE	; 254
    15e6:	90 81       	ld	r25, Z
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	69 2f       	mov	r22, r25
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>

void KPAD_voidGetKeyPressed(u8 * Copy_u8RowIndex , u8* Copy_u8ColIndex){
	*Copy_u8ColIndex =0xff;
	*Copy_u8RowIndex =0xff;
	u8 Local_u8RowCounter ,Local_u8ColCounter ;
	for(Local_u8ColCounter = 0 ; Local_u8ColCounter< KPAD_U8_COL_SIZE ; Local_u8ColCounter++)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	8f 5f       	subi	r24, 0xFF	; 255
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	84 30       	cpi	r24, 0x04	; 4
    15fc:	08 f4       	brcc	.+2      	; 0x1600 <KPAD_voidGetKeyPressed+0xc0>
    15fe:	b5 cf       	rjmp	.-150    	; 0x156a <KPAD_voidGetKeyPressed+0x2a>




	}
}
    1600:	26 96       	adiw	r28, 0x06	; 6
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <CLCD_SendEnablePulse>:
#include "CLCD_priv.h"
#include "CLCD_config.h"
#include "CLCD_int.h"

static void CLCD_SendEnablePulse ()
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	2e 97       	sbiw	r28, 0x0e	; 14
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
	//	send enable pulse
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_E_PIN , DIO_PIN_HIGH);
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	63 e0       	ldi	r22, 0x03	; 3
    162a:	41 e0       	ldi	r20, 0x01	; 1
    162c:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a0 e2       	ldi	r26, 0x20	; 32
    1636:	b1 e4       	ldi	r27, 0x41	; 65
    1638:	8b 87       	std	Y+11, r24	; 0x0b
    163a:	9c 87       	std	Y+12, r25	; 0x0c
    163c:	ad 87       	std	Y+13, r26	; 0x0d
    163e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1640:	6b 85       	ldd	r22, Y+11	; 0x0b
    1642:	7c 85       	ldd	r23, Y+12	; 0x0c
    1644:	8d 85       	ldd	r24, Y+13	; 0x0d
    1646:	9e 85       	ldd	r25, Y+14	; 0x0e
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a e7       	ldi	r20, 0x7A	; 122
    164e:	55 e4       	ldi	r21, 0x45	; 69
    1650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	8f 83       	std	Y+7, r24	; 0x07
    165a:	98 87       	std	Y+8, r25	; 0x08
    165c:	a9 87       	std	Y+9, r26	; 0x09
    165e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1660:	6f 81       	ldd	r22, Y+7	; 0x07
    1662:	78 85       	ldd	r23, Y+8	; 0x08
    1664:	89 85       	ldd	r24, Y+9	; 0x09
    1666:	9a 85       	ldd	r25, Y+10	; 0x0a
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1674:	88 23       	and	r24, r24
    1676:	2c f4       	brge	.+10     	; 0x1682 <CLCD_SendEnablePulse+0x70>
		__ticks = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
    1680:	3f c0       	rjmp	.+126    	; 0x1700 <CLCD_SendEnablePulse+0xee>
	else if (__tmp > 65535)
    1682:	6f 81       	ldd	r22, Y+7	; 0x07
    1684:	78 85       	ldd	r23, Y+8	; 0x08
    1686:	89 85       	ldd	r24, Y+9	; 0x09
    1688:	9a 85       	ldd	r25, Y+10	; 0x0a
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	4f e7       	ldi	r20, 0x7F	; 127
    1690:	57 e4       	ldi	r21, 0x47	; 71
    1692:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1696:	18 16       	cp	r1, r24
    1698:	4c f5       	brge	.+82     	; 0x16ec <CLCD_SendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169a:	6b 85       	ldd	r22, Y+11	; 0x0b
    169c:	7c 85       	ldd	r23, Y+12	; 0x0c
    169e:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e2       	ldi	r20, 0x20	; 32
    16a8:	51 e4       	ldi	r21, 0x41	; 65
    16aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	bc 01       	movw	r22, r24
    16b4:	cd 01       	movw	r24, r26
    16b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <CLCD_SendEnablePulse+0xd0>
    16c4:	80 e9       	ldi	r24, 0x90	; 144
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	9c 83       	std	Y+4, r25	; 0x04
    16ca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <CLCD_SendEnablePulse+0xbe>
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	9e 81       	ldd	r25, Y+6	; 0x06
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	69 f7       	brne	.-38     	; 0x16c4 <CLCD_SendEnablePulse+0xb2>
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <CLCD_SendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	9a 83       	std	Y+2, r25	; 0x02
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <CLCD_SendEnablePulse+0xfa>
    1710:	9a 83       	std	Y+2, r25	; 0x02
    1712:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_E_PIN , DIO_PIN_LOW);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	63 e0       	ldi	r22, 0x03	; 3
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
}
    171e:	2e 96       	adiw	r28, 0x0e	; 14
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <CLCD_voidSetHalfPort>:
#if CLCD_U8_MODE == CLCD_U8_4_BIT_MODE
static void CLCD_voidSetHalfPort(u8 Copy_data)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	0f 92       	push	r0
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinVlaue(CLCD_U8_DATA_PORT,CLCD_U8_DATA_PIN_0,GET_BIT(Copy_data,0));
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	98 2f       	mov	r25, r24
    1740:	91 70       	andi	r25, 0x01	; 1
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	64 e0       	ldi	r22, 0x04	; 4
    1746:	49 2f       	mov	r20, r25
    1748:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
	DIO_voidSetPinVlaue(CLCD_U8_DATA_PORT,CLCD_U8_DATA_PIN_1,GET_BIT(Copy_data,1));
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	86 95       	lsr	r24
    1750:	98 2f       	mov	r25, r24
    1752:	91 70       	andi	r25, 0x01	; 1
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	65 e0       	ldi	r22, 0x05	; 5
    1758:	49 2f       	mov	r20, r25
    175a:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
	DIO_voidSetPinVlaue(CLCD_U8_DATA_PORT,CLCD_U8_DATA_PIN_2,GET_BIT(Copy_data,2));
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	86 95       	lsr	r24
    1762:	86 95       	lsr	r24
    1764:	98 2f       	mov	r25, r24
    1766:	91 70       	andi	r25, 0x01	; 1
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	66 e0       	ldi	r22, 0x06	; 6
    176c:	49 2f       	mov	r20, r25
    176e:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
	DIO_voidSetPinVlaue(CLCD_U8_DATA_PORT,CLCD_U8_DATA_PIN_3,GET_BIT(Copy_data,3));
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	86 95       	lsr	r24
    1776:	86 95       	lsr	r24
    1778:	86 95       	lsr	r24
    177a:	98 2f       	mov	r25, r24
    177c:	91 70       	andi	r25, 0x01	; 1
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	67 e0       	ldi	r22, 0x07	; 7
    1782:	49 2f       	mov	r20, r25
    1784:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
}
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <CLCD_voidSendData>:
#endif
void CLCD_voidSendData(u8 Copy_u8Data){
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	0f 92       	push	r0
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	89 83       	std	Y+1, r24	; 0x01
	//	clr R/W
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_RW_PIN , DIO_PIN_LOW);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	62 e0       	ldi	r22, 0x02	; 2
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
	//	set RS
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_RS_PIN , DIO_PIN_HIGH);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
#if CLCD_U8_MODE == CLCD_U8_8_BIT_MODE
	//	data on Data port
	DIO_voidSetPortVlaue(CLCD_U8_DATA_PORT,Copy_u8Data);
	CLCD_SendEnablePulse();
#elif CLCD_U8_MODE == CLCD_U8_4_BIT_MODE
	CLCD_voidSetHalfPort(Copy_u8Data>>4);
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	82 95       	swap	r24
    17b4:	8f 70       	andi	r24, 0x0F	; 15
    17b6:	0e 94 98 0b 	call	0x1730	; 0x1730 <CLCD_voidSetHalfPort>
	CLCD_SendEnablePulse();
    17ba:	0e 94 09 0b 	call	0x1612	; 0x1612 <CLCD_SendEnablePulse>
	CLCD_voidSetHalfPort(Copy_u8Data);
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	0e 94 98 0b 	call	0x1730	; 0x1730 <CLCD_voidSetHalfPort>
	CLCD_SendEnablePulse();
    17c4:	0e 94 09 0b 	call	0x1612	; 0x1612 <CLCD_SendEnablePulse>
#endif
}
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <CLCD_voidSendInstruction>:
void CLCD_voidSendInstruction(u8 Copy_u8Instruction){
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	0f 92       	push	r0
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	89 83       	std	Y+1, r24	; 0x01

	//	clr R/W
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_RW_PIN , DIO_PIN_LOW);
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	62 e0       	ldi	r22, 0x02	; 2
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
	//	set RS
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_RS_PIN , DIO_PIN_LOW);
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	61 e0       	ldi	r22, 0x01	; 1
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
	//	data on Data port
	DIO_voidSetPortVlaue(CLCD_U8_DATA_PORT,Copy_u8Instruction);
	CLCD_SendEnablePulse();

#elif CLCD_U8_MODE == CLCD_U8_4_BIT_MODE
	CLCD_voidSetHalfPort(Copy_u8Instruction>>4);
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	82 95       	swap	r24
    17f4:	8f 70       	andi	r24, 0x0F	; 15
    17f6:	0e 94 98 0b 	call	0x1730	; 0x1730 <CLCD_voidSetHalfPort>
	CLCD_SendEnablePulse();
    17fa:	0e 94 09 0b 	call	0x1612	; 0x1612 <CLCD_SendEnablePulse>
	CLCD_voidSetHalfPort(Copy_u8Instruction);
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	0e 94 98 0b 	call	0x1730	; 0x1730 <CLCD_voidSetHalfPort>
	CLCD_SendEnablePulse();
    1804:	0e 94 09 0b 	call	0x1612	; 0x1612 <CLCD_SendEnablePulse>
#endif
}
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	2e 97       	sbiw	r28, 0x0e	; 14
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a0 e2       	ldi	r26, 0x20	; 32
    182a:	b2 e4       	ldi	r27, 0x42	; 66
    182c:	8b 87       	std	Y+11, r24	; 0x0b
    182e:	9c 87       	std	Y+12, r25	; 0x0c
    1830:	ad 87       	std	Y+13, r26	; 0x0d
    1832:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1834:	6b 85       	ldd	r22, Y+11	; 0x0b
    1836:	7c 85       	ldd	r23, Y+12	; 0x0c
    1838:	8d 85       	ldd	r24, Y+13	; 0x0d
    183a:	9e 85       	ldd	r25, Y+14	; 0x0e
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	4a e7       	ldi	r20, 0x7A	; 122
    1842:	55 e4       	ldi	r21, 0x45	; 69
    1844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	8f 83       	std	Y+7, r24	; 0x07
    184e:	98 87       	std	Y+8, r25	; 0x08
    1850:	a9 87       	std	Y+9, r26	; 0x09
    1852:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1854:	6f 81       	ldd	r22, Y+7	; 0x07
    1856:	78 85       	ldd	r23, Y+8	; 0x08
    1858:	89 85       	ldd	r24, Y+9	; 0x09
    185a:	9a 85       	ldd	r25, Y+10	; 0x0a
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e8       	ldi	r20, 0x80	; 128
    1862:	5f e3       	ldi	r21, 0x3F	; 63
    1864:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1868:	88 23       	and	r24, r24
    186a:	2c f4       	brge	.+10     	; 0x1876 <CLCD_voidInit+0x66>
		__ticks = 1;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
    1874:	3f c0       	rjmp	.+126    	; 0x18f4 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1876:	6f 81       	ldd	r22, Y+7	; 0x07
    1878:	78 85       	ldd	r23, Y+8	; 0x08
    187a:	89 85       	ldd	r24, Y+9	; 0x09
    187c:	9a 85       	ldd	r25, Y+10	; 0x0a
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	3f ef       	ldi	r19, 0xFF	; 255
    1882:	4f e7       	ldi	r20, 0x7F	; 127
    1884:	57 e4       	ldi	r21, 0x47	; 71
    1886:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    188a:	18 16       	cp	r1, r24
    188c:	4c f5       	brge	.+82     	; 0x18e0 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1890:	7c 85       	ldd	r23, Y+12	; 0x0c
    1892:	8d 85       	ldd	r24, Y+13	; 0x0d
    1894:	9e 85       	ldd	r25, Y+14	; 0x0e
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e2       	ldi	r20, 0x20	; 32
    189c:	51 e4       	ldi	r21, 0x41	; 65
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	9e 83       	std	Y+6, r25	; 0x06
    18b4:	8d 83       	std	Y+5, r24	; 0x05
    18b6:	0f c0       	rjmp	.+30     	; 0x18d6 <CLCD_voidInit+0xc6>
    18b8:	80 e9       	ldi	r24, 0x90	; 144
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	9c 83       	std	Y+4, r25	; 0x04
    18be:	8b 83       	std	Y+3, r24	; 0x03
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <CLCD_voidInit+0xb4>
    18c8:	9c 83       	std	Y+4, r25	; 0x04
    18ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	9e 83       	std	Y+6, r25	; 0x06
    18d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d6:	8d 81       	ldd	r24, Y+5	; 0x05
    18d8:	9e 81       	ldd	r25, Y+6	; 0x06
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	69 f7       	brne	.-38     	; 0x18b8 <CLCD_voidInit+0xa8>
    18de:	14 c0       	rjmp	.+40     	; 0x1908 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e0:	6f 81       	ldd	r22, Y+7	; 0x07
    18e2:	78 85       	ldd	r23, Y+8	; 0x08
    18e4:	89 85       	ldd	r24, Y+9	; 0x09
    18e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	9e 83       	std	Y+6, r25	; 0x06
    18f2:	8d 83       	std	Y+5, r24	; 0x05
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	9e 81       	ldd	r25, Y+6	; 0x06
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <CLCD_voidInit+0xf0>
    1904:	9a 83       	std	Y+2, r25	; 0x02
    1906:	89 83       	std	Y+1, r24	; 0x01
	//	function set
	CLCD_voidSendInstruction(0b00111000);

#elif CLCD_U8_MODE == CLCD_U8_4_BIT_MODE

	CLCD_voidSetHalfPort(0b0010);
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	0e 94 98 0b 	call	0x1730	; 0x1730 <CLCD_voidSetHalfPort>
	CLCD_SendEnablePulse();
    190e:	0e 94 09 0b 	call	0x1612	; 0x1612 <CLCD_SendEnablePulse>

	CLCD_voidSetHalfPort(0b0010);
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	0e 94 98 0b 	call	0x1730	; 0x1730 <CLCD_voidSetHalfPort>
	CLCD_SendEnablePulse();
    1918:	0e 94 09 0b 	call	0x1612	; 0x1612 <CLCD_SendEnablePulse>

	CLCD_voidSetHalfPort(0b1000);
    191c:	88 e0       	ldi	r24, 0x08	; 8
    191e:	0e 94 98 0b 	call	0x1730	; 0x1730 <CLCD_voidSetHalfPort>
	CLCD_SendEnablePulse();
    1922:	0e 94 09 0b 	call	0x1612	; 0x1612 <CLCD_SendEnablePulse>

	#endif
	//	Display on /off
	CLCD_voidSendInstruction(0b00001111);
    1926:	8f e0       	ldi	r24, 0x0F	; 15
    1928:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendInstruction>

	//	clear
	CLCD_voidSendInstruction(1);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendInstruction>
}
    1932:	2e 96       	adiw	r28, 0x0e	; 14
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <CLCD_voidSendString>:



void CLCD_voidSendString(char *str ){
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <CLCD_voidSendString+0x6>
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	9a 83       	std	Y+2, r25	; 0x02
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	0b c0       	rjmp	.+22     	; 0x196a <CLCD_voidSendString+0x26>
	while(*str != '\0')
		CLCD_voidSendData(*str++);
    1954:	e9 81       	ldd	r30, Y+1	; 0x01
    1956:	fa 81       	ldd	r31, Y+2	; 0x02
    1958:	20 81       	ld	r18, Z
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	82 2f       	mov	r24, r18
    1966:	0e 94 c8 0b 	call	0x1790	; 0x1790 <CLCD_voidSendData>
}



void CLCD_voidSendString(char *str ){
	while(*str != '\0')
    196a:	e9 81       	ldd	r30, Y+1	; 0x01
    196c:	fa 81       	ldd	r31, Y+2	; 0x02
    196e:	80 81       	ld	r24, Z
    1970:	88 23       	and	r24, r24
    1972:	81 f7       	brne	.-32     	; 0x1954 <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*str++);
}
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <CLCD_voidSendNUmber>:
void CLCD_voidSendNUmber(u16 Copy_u16num){
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	27 97       	sbiw	r28, 0x07	; 7
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	9f 83       	std	Y+7, r25	; 0x07
    1994:	8e 83       	std	Y+6, r24	; 0x06
	u16 local_tmp  = 0 ,counter = 0 ;
    1996:	1d 82       	std	Y+5, r1	; 0x05
    1998:	1c 82       	std	Y+4, r1	; 0x04
    199a:	1b 82       	std	Y+3, r1	; 0x03
    199c:	1a 82       	std	Y+2, r1	; 0x02
    199e:	0f c0       	rjmp	.+30     	; 0x19be <CLCD_voidSendNUmber+0x40>
	while((Copy_u16num%10) == 0  )
	{
		Copy_u16num/=10;
    19a0:	8e 81       	ldd	r24, Y+6	; 0x06
    19a2:	9f 81       	ldd	r25, Y+7	; 0x07
    19a4:	2a e0       	ldi	r18, 0x0A	; 10
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	b9 01       	movw	r22, r18
    19aa:	0e 94 2d 11 	call	0x225a	; 0x225a <__udivmodhi4>
    19ae:	cb 01       	movw	r24, r22
    19b0:	9f 83       	std	Y+7, r25	; 0x07
    19b2:	8e 83       	std	Y+6, r24	; 0x06
		counter++;
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	9b 81       	ldd	r25, Y+3	; 0x03
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	9b 83       	std	Y+3, r25	; 0x03
    19bc:	8a 83       	std	Y+2, r24	; 0x02
	while(*str != '\0')
		CLCD_voidSendData(*str++);
}
void CLCD_voidSendNUmber(u16 Copy_u16num){
	u16 local_tmp  = 0 ,counter = 0 ;
	while((Copy_u16num%10) == 0  )
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	9f 81       	ldd	r25, Y+7	; 0x07
    19c2:	2a e0       	ldi	r18, 0x0A	; 10
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	b9 01       	movw	r22, r18
    19c8:	0e 94 2d 11 	call	0x225a	; 0x225a <__udivmodhi4>
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	41 f3       	breq	.-48     	; 0x19a0 <CLCD_voidSendNUmber+0x22>
    19d0:	22 c0       	rjmp	.+68     	; 0x1a16 <CLCD_voidSendNUmber+0x98>

	}
	while(Copy_u16num>0 )
	{

		local_tmp = local_tmp*10 + Copy_u16num%10;
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	9c 01       	movw	r18, r24
    19d8:	22 0f       	add	r18, r18
    19da:	33 1f       	adc	r19, r19
    19dc:	c9 01       	movw	r24, r18
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	f9 01       	movw	r30, r18
    19e8:	e8 0f       	add	r30, r24
    19ea:	f9 1f       	adc	r31, r25
    19ec:	8e 81       	ldd	r24, Y+6	; 0x06
    19ee:	9f 81       	ldd	r25, Y+7	; 0x07
    19f0:	2a e0       	ldi	r18, 0x0A	; 10
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	b9 01       	movw	r22, r18
    19f6:	0e 94 2d 11 	call	0x225a	; 0x225a <__udivmodhi4>
    19fa:	8e 0f       	add	r24, r30
    19fc:	9f 1f       	adc	r25, r31
    19fe:	9d 83       	std	Y+5, r25	; 0x05
    1a00:	8c 83       	std	Y+4, r24	; 0x04
		Copy_u16num/=10;
    1a02:	8e 81       	ldd	r24, Y+6	; 0x06
    1a04:	9f 81       	ldd	r25, Y+7	; 0x07
    1a06:	2a e0       	ldi	r18, 0x0A	; 10
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	0e 94 2d 11 	call	0x225a	; 0x225a <__udivmodhi4>
    1a10:	cb 01       	movw	r24, r22
    1a12:	9f 83       	std	Y+7, r25	; 0x07
    1a14:	8e 83       	std	Y+6, r24	; 0x06
	{
		Copy_u16num/=10;
		counter++;

	}
	while(Copy_u16num>0 )
    1a16:	8e 81       	ldd	r24, Y+6	; 0x06
    1a18:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	d1 f6       	brne	.-76     	; 0x19d2 <CLCD_voidSendNUmber+0x54>
	{

		local_tmp = local_tmp*10 + Copy_u16num%10;
		Copy_u16num/=10;
	}
	Copy_u16num = local_tmp;
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	9d 81       	ldd	r25, Y+5	; 0x05
    1a22:	9f 83       	std	Y+7, r25	; 0x07
    1a24:	8e 83       	std	Y+6, r24	; 0x06
    1a26:	14 c0       	rjmp	.+40     	; 0x1a50 <CLCD_voidSendNUmber+0xd2>
	while(Copy_u16num >0 )
	{
		CLCD_voidSendData(Copy_u16num%10 +'0');
    1a28:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2c:	2a e0       	ldi	r18, 0x0A	; 10
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	b9 01       	movw	r22, r18
    1a32:	0e 94 2d 11 	call	0x225a	; 0x225a <__udivmodhi4>
    1a36:	80 5d       	subi	r24, 0xD0	; 208
    1a38:	0e 94 c8 0b 	call	0x1790	; 0x1790 <CLCD_voidSendData>
		Copy_u16num/=10;
    1a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a40:	2a e0       	ldi	r18, 0x0A	; 10
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	b9 01       	movw	r22, r18
    1a46:	0e 94 2d 11 	call	0x225a	; 0x225a <__udivmodhi4>
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9f 83       	std	Y+7, r25	; 0x07
    1a4e:	8e 83       	std	Y+6, r24	; 0x06

		local_tmp = local_tmp*10 + Copy_u16num%10;
		Copy_u16num/=10;
	}
	Copy_u16num = local_tmp;
	while(Copy_u16num >0 )
    1a50:	8e 81       	ldd	r24, Y+6	; 0x06
    1a52:	9f 81       	ldd	r25, Y+7	; 0x07
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	41 f7       	brne	.-48     	; 0x1a28 <CLCD_voidSendNUmber+0xaa>
	{
		CLCD_voidSendData(Copy_u16num%10 +'0');
		Copy_u16num/=10;
	}
	for(u8 i = 0 ; i<counter ; i++)
    1a58:	19 82       	std	Y+1, r1	; 0x01
    1a5a:	06 c0       	rjmp	.+12     	; 0x1a68 <CLCD_voidSendNUmber+0xea>
	{
		CLCD_voidSendData('0');
    1a5c:	80 e3       	ldi	r24, 0x30	; 48
    1a5e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <CLCD_voidSendData>
	while(Copy_u16num >0 )
	{
		CLCD_voidSendData(Copy_u16num%10 +'0');
		Copy_u16num/=10;
	}
	for(u8 i = 0 ; i<counter ; i++)
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	8f 5f       	subi	r24, 0xFF	; 255
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	9b 81       	ldd	r25, Y+3	; 0x03
    1a72:	28 17       	cp	r18, r24
    1a74:	39 07       	cpc	r19, r25
    1a76:	90 f3       	brcs	.-28     	; 0x1a5c <CLCD_voidSendNUmber+0xde>
	{
		CLCD_voidSendData('0');

	}
}
    1a78:	27 96       	adiw	r28, 0x07	; 7
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <CLCD_voidSetCursorPosition>:
void CLCD_voidSetCursorPosition(u8 Copy_u8X , u8 Copy_u8y)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <CLCD_voidSetCursorPosition+0x6>
    1a90:	0f 92       	push	r0
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	8a 83       	std	Y+2, r24	; 0x02
    1a98:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8address ;

	Local_u8address = Copy_u8X + Copy_u8y * 0x40;
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	00 24       	eor	r0, r0
    1aa2:	96 95       	lsr	r25
    1aa4:	87 95       	ror	r24
    1aa6:	07 94       	ror	r0
    1aa8:	96 95       	lsr	r25
    1aaa:	87 95       	ror	r24
    1aac:	07 94       	ror	r0
    1aae:	98 2f       	mov	r25, r24
    1ab0:	80 2d       	mov	r24, r0
    1ab2:	98 2f       	mov	r25, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	89 0f       	add	r24, r25
    1ab8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8address,7);
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	80 68       	ori	r24, 0x80	; 128
    1abe:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendInstruction(Local_u8address);
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendInstruction>
}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <CLCD_SendSpecialCharcter>:
void CLCD_SendSpecialCharcter(u8 * Copy_buffer , u8 Copy_num , u8  Copy_u8X,u8 Copy_u8y )
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	27 97       	sbiw	r28, 0x07	; 7
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    1aea:	6d 83       	std	Y+5, r22	; 0x05
    1aec:	4e 83       	std	Y+6, r20	; 0x06
    1aee:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address , Local_u8Counter = 0 ;
    1af0:	19 82       	std	Y+1, r1	; 0x01

	Local_u8Address = Copy_num * 8 ;
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(Local_u8Address , 6);
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	80 64       	ori	r24, 0x40	; 64
    1b0a:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendInstruction(Local_u8Address);
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendInstruction>

	for(Local_u8Counter = 0 ; Local_u8Counter<8 ; Local_u8Counter++)
    1b12:	19 82       	std	Y+1, r1	; 0x01
    1b14:	0e c0       	rjmp	.+28     	; 0x1b32 <CLCD_SendSpecialCharcter+0x60>
	{
		CLCD_voidSendData(Copy_buffer[Local_u8Counter]);
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	fc 01       	movw	r30, r24
    1b22:	e2 0f       	add	r30, r18
    1b24:	f3 1f       	adc	r31, r19
    1b26:	80 81       	ld	r24, Z
    1b28:	0e 94 c8 0b 	call	0x1790	; 0x1790 <CLCD_voidSendData>

	Local_u8Address = Copy_num * 8 ;
	SET_BIT(Local_u8Address , 6);
	CLCD_voidSendInstruction(Local_u8Address);

	for(Local_u8Counter = 0 ; Local_u8Counter<8 ; Local_u8Counter++)
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	8f 5f       	subi	r24, 0xFF	; 255
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	88 30       	cpi	r24, 0x08	; 8
    1b36:	78 f3       	brcs	.-34     	; 0x1b16 <CLCD_SendSpecialCharcter+0x44>
	{
		CLCD_voidSendData(Copy_buffer[Local_u8Counter]);
	}

	CLCD_voidSetCursorPosition(Copy_u8X,Copy_u8y);
    1b38:	8e 81       	ldd	r24, Y+6	; 0x06
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <CLCD_voidSetCursorPosition>

	CLCD_voidSendData(Copy_num);
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	0e 94 c8 0b 	call	0x1790	; 0x1790 <CLCD_voidSendData>

}
    1b46:	27 96       	adiw	r28, 0x07	; 7
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <CLCD_voidClearDisplay>:


void CLCD_voidClearDisplay(){
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendInstruction(1);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendInstruction>
}
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <main>:
u16 get_Temperature();



int main()
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	c9 55       	subi	r28, 0x59	; 89
    1b76:	d0 40       	sbci	r29, 0x00	; 0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    1b82:	0e 94 17 07 	call	0xe2e	; 0xe2e <PORT_voidInit>
	ADC_voidInit();
    1b86:	0e 94 82 09 	call	0x1304	; 0x1304 <ADC_voidInit>

	u8 datapins1[4] = {DIO_PIN0 , 1 , 2 , 3};
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	ec 5b       	subi	r30, 0xBC	; 188
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	10 82       	st	Z, r1
    1b92:	fe 01       	movw	r30, r28
    1b94:	ec 5b       	subi	r30, 0xBC	; 188
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	81 83       	std	Z+1, r24	; 0x01
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	ec 5b       	subi	r30, 0xBC	; 188
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	82 83       	std	Z+2, r24	; 0x02
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	ec 5b       	subi	r30, 0xBC	; 188
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	83 83       	std	Z+3, r24	; 0x03
	u8 datapins2[] = {4 , 5 , 6 , 7};
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e8 5b       	subi	r30, 0xB8	; 184
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	84 e0       	ldi	r24, 0x04	; 4
    1bb8:	80 83       	st	Z, r24
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e8 5b       	subi	r30, 0xB8	; 184
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	85 e0       	ldi	r24, 0x05	; 5
    1bc2:	81 83       	std	Z+1, r24	; 0x01
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e8 5b       	subi	r30, 0xB8	; 184
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	86 e0       	ldi	r24, 0x06	; 6
    1bcc:	82 83       	std	Z+2, r24	; 0x02
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e8 5b       	subi	r30, 0xB8	; 184
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	87 e0       	ldi	r24, 0x07	; 7
    1bd6:	83 83       	std	Z+3, r24	; 0x03

	SSEG_t seg1;
	seg1.SSEG_u8DataPinarr[0] = datapins1[0];
    1bd8:	fe 01       	movw	r30, r28
    1bda:	ec 5b       	subi	r30, 0xBC	; 188
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 81       	ld	r24, Z
    1be0:	fe 01       	movw	r30, r28
    1be2:	e4 5b       	subi	r30, 0xB4	; 180
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	81 83       	std	Z+1, r24	; 0x01
	seg1.SSEG_u8DataPinarr[1] = datapins1[1];
    1be8:	fe 01       	movw	r30, r28
    1bea:	ec 5b       	subi	r30, 0xBC	; 188
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	81 81       	ldd	r24, Z+1	; 0x01
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e4 5b       	subi	r30, 0xB4	; 180
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	82 83       	std	Z+2, r24	; 0x02
	seg1.SSEG_u8DataPinarr[2] = datapins1[2];
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ec 5b       	subi	r30, 0xBC	; 188
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	fe 01       	movw	r30, r28
    1c02:	e4 5b       	subi	r30, 0xB4	; 180
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	83 83       	std	Z+3, r24	; 0x03
	seg1.SSEG_u8DataPinarr[3] = datapins1[3];
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ec 5b       	subi	r30, 0xBC	; 188
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	83 81       	ldd	r24, Z+3	; 0x03
    1c10:	fe 01       	movw	r30, r28
    1c12:	e4 5b       	subi	r30, 0xB4	; 180
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	84 83       	std	Z+4, r24	; 0x04
	seg1.SSEG_u8DataPort = 3;
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e4 5b       	subi	r30, 0xB4	; 180
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	83 e0       	ldi	r24, 0x03	; 3
    1c20:	80 83       	st	Z, r24
	seg1.SSEG_u8EnPin = 0;
    1c22:	fe 01       	movw	r30, r28
    1c24:	e4 5b       	subi	r30, 0xB4	; 180
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	16 82       	std	Z+6, r1	; 0x06
	seg1.SSEG_u8EnPort = 0;
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e4 5b       	subi	r30, 0xB4	; 180
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	15 82       	std	Z+5, r1	; 0x05
	SSEG_t seg2;
	seg2.SSEG_u8DataPinarr[0] = datapins2[0];
    1c32:	fe 01       	movw	r30, r28
    1c34:	e8 5b       	subi	r30, 0xB8	; 184
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	80 81       	ld	r24, Z
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ed 5a       	subi	r30, 0xAD	; 173
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	81 83       	std	Z+1, r24	; 0x01
	seg2.SSEG_u8DataPinarr[1] = datapins2[1];
    1c42:	fe 01       	movw	r30, r28
    1c44:	e8 5b       	subi	r30, 0xB8	; 184
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	81 81       	ldd	r24, Z+1	; 0x01
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ed 5a       	subi	r30, 0xAD	; 173
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	82 83       	std	Z+2, r24	; 0x02
	seg2.SSEG_u8DataPinarr[2] = datapins2[2];
    1c52:	fe 01       	movw	r30, r28
    1c54:	e8 5b       	subi	r30, 0xB8	; 184
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ed 5a       	subi	r30, 0xAD	; 173
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	83 83       	std	Z+3, r24	; 0x03
	seg2.SSEG_u8DataPinarr[3] = datapins2[3];
    1c62:	fe 01       	movw	r30, r28
    1c64:	e8 5b       	subi	r30, 0xB8	; 184
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	83 81       	ldd	r24, Z+3	; 0x03
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ed 5a       	subi	r30, 0xAD	; 173
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	84 83       	std	Z+4, r24	; 0x04
	seg2.SSEG_u8DataPort = 3;
    1c72:	fe 01       	movw	r30, r28
    1c74:	ed 5a       	subi	r30, 0xAD	; 173
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	83 e0       	ldi	r24, 0x03	; 3
    1c7a:	80 83       	st	Z, r24
	seg2.SSEG_u8EnPin = 0;
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	ed 5a       	subi	r30, 0xAD	; 173
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	16 82       	std	Z+6, r1	; 0x06
	seg2.SSEG_u8EnPort = 0;
    1c84:	fe 01       	movw	r30, r28
    1c86:	ed 5a       	subi	r30, 0xAD	; 173
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	15 82       	std	Z+5, r1	; 0x05
	GIE_voidEnableGlobalInterrupt();
    1c8c:	0e 94 3b 07 	call	0xe76	; 0xe76 <GIE_voidEnableGlobalInterrupt>
	u8 u8num=0;
    1c90:	fe 01       	movw	r30, r28
    1c92:	ed 5b       	subi	r30, 0xBD	; 189
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	10 82       	st	Z, r1
	u8num = intToBCD(u8num);
    1c98:	fe 01       	movw	r30, r28
    1c9a:	ed 5b       	subi	r30, 0xBD	; 189
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	80 81       	ld	r24, Z
    1ca0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <intToBCD>
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ed 5b       	subi	r30, 0xBD	; 189
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 83       	st	Z, r24
	int i = 0;
    1cac:	fe 01       	movw	r30, r28
    1cae:	ef 5b       	subi	r30, 0xBF	; 191
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	11 82       	std	Z+1, r1	; 0x01
    1cb4:	10 82       	st	Z, r1
	int temp = 60;
    1cb6:	8c e3       	ldi	r24, 0x3C	; 60
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ff 96       	adiw	r30, 0x3f	; 63
    1cbe:	91 83       	std	Z+1, r25	; 0x01
    1cc0:	80 83       	st	Z, r24
	int temp_sen = 65;
    1cc2:	81 e4       	ldi	r24, 0x41	; 65
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9e af       	std	Y+62, r25	; 0x3e
    1cc8:	8d af       	std	Y+61, r24	; 0x3d
	int counter = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9c af       	std	Y+60, r25	; 0x3c
    1cd0:	8b af       	std	Y+59, r24	; 0x3b
	int enable = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9a af       	std	Y+58, r25	; 0x3a
    1cd8:	89 af       	std	Y+57, r24	; 0x39
	while(1)
	{
			temp_sen =get_Temperature() *4.37/10;
    1cda:	0e 94 17 11 	call	0x222e	; 0x222e <get_Temperature>
    1cde:	cc 01       	movw	r24, r24
    1ce0:	a0 e0       	ldi	r26, 0x00	; 0
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	cd 01       	movw	r24, r26
    1ce8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	2a e0       	ldi	r18, 0x0A	; 10
    1cf6:	37 ed       	ldi	r19, 0xD7	; 215
    1cf8:	4b e8       	ldi	r20, 0x8B	; 139
    1cfa:	50 e4       	ldi	r21, 0x40	; 64
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e af       	std	Y+62, r25	; 0x3e
    1d26:	8d af       	std	Y+61, r24	; 0x3d
			SSEG_voidWriteOnTwo(temp, &seg1, &seg2);
    1d28:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d2a:	9e 01       	movw	r18, r28
    1d2c:	24 5b       	subi	r18, 0xB4	; 180
    1d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d30:	ae 01       	movw	r20, r28
    1d32:	4d 5a       	subi	r20, 0xAD	; 173
    1d34:	5f 4f       	sbci	r21, 0xFF	; 255
    1d36:	b9 01       	movw	r22, r18
    1d38:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <SSEG_voidWriteOnTwo>
			if(counter == 1)
    1d3c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d3e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	91 05       	cpc	r25, r1
    1d44:	f1 f4       	brne	.+60     	; 0x1d82 <main+0x216>
			{
			if(temp > temp_sen)
    1d46:	fe 01       	movw	r30, r28
    1d48:	ff 96       	adiw	r30, 0x3f	; 63
    1d4a:	20 81       	ld	r18, Z
    1d4c:	31 81       	ldd	r19, Z+1	; 0x01
    1d4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d50:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d52:	82 17       	cp	r24, r18
    1d54:	93 07       	cpc	r25, r19
    1d56:	24 f4       	brge	.+8      	; 0x1d60 <main+0x1f4>
			{
				turn_On_Heating_Element();
    1d58:	0e 94 ff 10 	call	0x21fe	; 0x21fe <turn_On_Heating_Element>
				turn_Off_Cooling_Element();
    1d5c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <turn_Off_Cooling_Element>
			}
			if(temp < temp_sen)
    1d60:	fe 01       	movw	r30, r28
    1d62:	ff 96       	adiw	r30, 0x3f	; 63
    1d64:	20 81       	ld	r18, Z
    1d66:	31 81       	ldd	r19, Z+1	; 0x01
    1d68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d6c:	28 17       	cp	r18, r24
    1d6e:	39 07       	cpc	r19, r25
    1d70:	24 f4       	brge	.+8      	; 0x1d7a <main+0x20e>
			{
				turn_On_Cooling_Element();
    1d72:	0e 94 0b 11 	call	0x2216	; 0x2216 <turn_On_Cooling_Element>
				turn_Off_Heating_Element();
    1d76:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <turn_Off_Heating_Element>
			}
			counter =1;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9c af       	std	Y+60, r25	; 0x3c
    1d80:	8b af       	std	Y+59, r24	; 0x3b
			}
			if(DIO_u8GetPinValue(1,1) == 1)
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	61 e0       	ldi	r22, 0x01	; 1
    1d86:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_u8GetPinValue>
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <main+0x224>
    1d8e:	8c c0       	rjmp	.+280    	; 0x1ea8 <main+0x33c>
			{
				counter = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9c af       	std	Y+60, r25	; 0x3c
    1d96:	8b af       	std	Y+59, r24	; 0x3b
				temp++;
    1d98:	fe 01       	movw	r30, r28
    1d9a:	ff 96       	adiw	r30, 0x3f	; 63
    1d9c:	80 81       	ld	r24, Z
    1d9e:	91 81       	ldd	r25, Z+1	; 0x01
    1da0:	01 96       	adiw	r24, 0x01	; 1
    1da2:	fe 01       	movw	r30, r28
    1da4:	ff 96       	adiw	r30, 0x3f	; 63
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24
				if(temp > 99)
    1daa:	fe 01       	movw	r30, r28
    1dac:	ff 96       	adiw	r30, 0x3f	; 63
    1dae:	80 81       	ld	r24, Z
    1db0:	91 81       	ldd	r25, Z+1	; 0x01
    1db2:	84 36       	cpi	r24, 0x64	; 100
    1db4:	91 05       	cpc	r25, r1
    1db6:	34 f0       	brlt	.+12     	; 0x1dc4 <main+0x258>
					temp=45;
    1db8:	8d e2       	ldi	r24, 0x2D	; 45
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	ff 96       	adiw	r30, 0x3f	; 63
    1dc0:	91 83       	std	Z+1, r25	; 0x01
    1dc2:	80 83       	st	Z, r24
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 ea       	ldi	r26, 0xA0	; 160
    1dca:	b1 e4       	ldi	r27, 0x41	; 65
    1dcc:	8d ab       	std	Y+53, r24	; 0x35
    1dce:	9e ab       	std	Y+54, r25	; 0x36
    1dd0:	af ab       	std	Y+55, r26	; 0x37
    1dd2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd4:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd6:	7e a9       	ldd	r23, Y+54	; 0x36
    1dd8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dda:	98 ad       	ldd	r25, Y+56	; 0x38
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4a e7       	ldi	r20, 0x7A	; 122
    1de2:	55 e4       	ldi	r21, 0x45	; 69
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	89 ab       	std	Y+49, r24	; 0x31
    1dee:	9a ab       	std	Y+50, r25	; 0x32
    1df0:	ab ab       	std	Y+51, r26	; 0x33
    1df2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1df4:	69 a9       	ldd	r22, Y+49	; 0x31
    1df6:	7a a9       	ldd	r23, Y+50	; 0x32
    1df8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfa:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e08:	88 23       	and	r24, r24
    1e0a:	2c f4       	brge	.+10     	; 0x1e16 <main+0x2aa>
		__ticks = 1;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	98 ab       	std	Y+48, r25	; 0x30
    1e12:	8f a7       	std	Y+47, r24	; 0x2f
    1e14:	3f c0       	rjmp	.+126    	; 0x1e94 <main+0x328>
	else if (__tmp > 65535)
    1e16:	69 a9       	ldd	r22, Y+49	; 0x31
    1e18:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	3f ef       	ldi	r19, 0xFF	; 255
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	57 e4       	ldi	r21, 0x47	; 71
    1e26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	4c f5       	brge	.+82     	; 0x1e80 <main+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e30:	7e a9       	ldd	r23, Y+54	; 0x36
    1e32:	8f a9       	ldd	r24, Y+55	; 0x37
    1e34:	98 ad       	ldd	r25, Y+56	; 0x38
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	98 ab       	std	Y+48, r25	; 0x30
    1e54:	8f a7       	std	Y+47, r24	; 0x2f
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <main+0x30a>
    1e58:	80 e9       	ldi	r24, 0x90	; 144
    1e5a:	91 e0       	ldi	r25, 0x01	; 1
    1e5c:	9e a7       	std	Y+46, r25	; 0x2e
    1e5e:	8d a7       	std	Y+45, r24	; 0x2d
    1e60:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e62:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <main+0x2f8>
    1e68:	9e a7       	std	Y+46, r25	; 0x2e
    1e6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	98 ab       	std	Y+48, r25	; 0x30
    1e74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e78:	98 a9       	ldd	r25, Y+48	; 0x30
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f7       	brne	.-38     	; 0x1e58 <main+0x2ec>
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <main+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	69 a9       	ldd	r22, Y+49	; 0x31
    1e82:	7a a9       	ldd	r23, Y+50	; 0x32
    1e84:	8b a9       	ldd	r24, Y+51	; 0x33
    1e86:	9c a9       	ldd	r25, Y+52	; 0x34
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	98 ab       	std	Y+48, r25	; 0x30
    1e92:	8f a7       	std	Y+47, r24	; 0x2f
    1e94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e96:	98 a9       	ldd	r25, Y+48	; 0x30
    1e98:	9c a7       	std	Y+44, r25	; 0x2c
    1e9a:	8b a7       	std	Y+43, r24	; 0x2b
    1e9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <main+0x334>
    1ea4:	9c a7       	std	Y+44, r25	; 0x2c
    1ea6:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(20);
			}
			if(DIO_u8GetPinValue(0,5) == 1)
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	65 e0       	ldi	r22, 0x05	; 5
    1eac:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_u8GetPinValue>
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <main+0x34a>
    1eb4:	7f c0       	rjmp	.+254    	; 0x1fb4 <main+0x448>
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a8 ec       	ldi	r26, 0xC8	; 200
    1ebc:	b1 e4       	ldi	r27, 0x41	; 65
    1ebe:	8f a3       	std	Y+39, r24	; 0x27
    1ec0:	98 a7       	std	Y+40, r25	; 0x28
    1ec2:	a9 a7       	std	Y+41, r26	; 0x29
    1ec4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eca:	89 a5       	ldd	r24, Y+41	; 0x29
    1ecc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	4a e7       	ldi	r20, 0x7A	; 122
    1ed4:	55 e4       	ldi	r21, 0x45	; 69
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	8b a3       	std	Y+35, r24	; 0x23
    1ee0:	9c a3       	std	Y+36, r25	; 0x24
    1ee2:	ad a3       	std	Y+37, r26	; 0x25
    1ee4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ee6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eea:	8d a1       	ldd	r24, Y+37	; 0x25
    1eec:	9e a1       	ldd	r25, Y+38	; 0x26
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	5f e3       	ldi	r21, 0x3F	; 63
    1ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efa:	88 23       	and	r24, r24
    1efc:	2c f4       	brge	.+10     	; 0x1f08 <main+0x39c>
		__ticks = 1;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9a a3       	std	Y+34, r25	; 0x22
    1f04:	89 a3       	std	Y+33, r24	; 0x21
    1f06:	3f c0       	rjmp	.+126    	; 0x1f86 <main+0x41a>
	else if (__tmp > 65535)
    1f08:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	3f ef       	ldi	r19, 0xFF	; 255
    1f14:	4f e7       	ldi	r20, 0x7F	; 127
    1f16:	57 e4       	ldi	r21, 0x47	; 71
    1f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1c:	18 16       	cp	r1, r24
    1f1e:	4c f5       	brge	.+82     	; 0x1f72 <main+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f20:	6f a1       	ldd	r22, Y+39	; 0x27
    1f22:	78 a5       	ldd	r23, Y+40	; 0x28
    1f24:	89 a5       	ldd	r24, Y+41	; 0x29
    1f26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e2       	ldi	r20, 0x20	; 32
    1f2e:	51 e4       	ldi	r21, 0x41	; 65
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9a a3       	std	Y+34, r25	; 0x22
    1f46:	89 a3       	std	Y+33, r24	; 0x21
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <main+0x3fc>
    1f4a:	80 e9       	ldi	r24, 0x90	; 144
    1f4c:	91 e0       	ldi	r25, 0x01	; 1
    1f4e:	98 a3       	std	Y+32, r25	; 0x20
    1f50:	8f 8f       	std	Y+31, r24	; 0x1f
    1f52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f54:	98 a1       	ldd	r25, Y+32	; 0x20
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <main+0x3ea>
    1f5a:	98 a3       	std	Y+32, r25	; 0x20
    1f5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f60:	9a a1       	ldd	r25, Y+34	; 0x22
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	9a a3       	std	Y+34, r25	; 0x22
    1f66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f68:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	69 f7       	brne	.-38     	; 0x1f4a <main+0x3de>
    1f70:	14 c0       	rjmp	.+40     	; 0x1f9a <main+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f72:	6b a1       	ldd	r22, Y+35	; 0x23
    1f74:	7c a1       	ldd	r23, Y+36	; 0x24
    1f76:	8d a1       	ldd	r24, Y+37	; 0x25
    1f78:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	9a a3       	std	Y+34, r25	; 0x22
    1f84:	89 a3       	std	Y+33, r24	; 0x21
    1f86:	89 a1       	ldd	r24, Y+33	; 0x21
    1f88:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <main+0x426>
    1f96:	9e 8f       	std	Y+30, r25	; 0x1e
    1f98:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(25);
				counter = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9c af       	std	Y+60, r25	; 0x3c
    1fa0:	8b af       	std	Y+59, r24	; 0x3b
				temp--;
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ff 96       	adiw	r30, 0x3f	; 63
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	fe 01       	movw	r30, r28
    1fae:	ff 96       	adiw	r30, 0x3f	; 63
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
			}
			if(DIO_u8GetPinValue(0,7) == 1)
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	67 e0       	ldi	r22, 0x07	; 7
    1fb8:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_u8GetPinValue>
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <main+0x456>
    1fc0:	8c ce       	rjmp	.-744    	; 0x1cda <main+0x16e>
			{
				turn_Off_Cooling_Element();
    1fc2:	0e 94 e7 10 	call	0x21ce	; 0x21ce <turn_Off_Cooling_Element>
				turn_Off_Heating_Element();
    1fc6:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <turn_Off_Heating_Element>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a8 ec       	ldi	r26, 0xC8	; 200
    1fd0:	b1 e4       	ldi	r27, 0x41	; 65
    1fd2:	89 8f       	std	Y+25, r24	; 0x19
    1fd4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fda:	69 8d       	ldd	r22, Y+25	; 0x19
    1fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a e7       	ldi	r20, 0x7A	; 122
    1fe8:	55 e4       	ldi	r21, 0x45	; 69
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	8d 8b       	std	Y+21, r24	; 0x15
    1ff4:	9e 8b       	std	Y+22, r25	; 0x16
    1ff6:	af 8b       	std	Y+23, r26	; 0x17
    1ff8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    2000:	98 8d       	ldd	r25, Y+24	; 0x18
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <main+0x4b0>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9c 8b       	std	Y+20, r25	; 0x14
    2018:	8b 8b       	std	Y+19, r24	; 0x13
    201a:	3f c0       	rjmp	.+126    	; 0x209a <main+0x52e>
	else if (__tmp > 65535)
    201c:	6d 89       	ldd	r22, Y+21	; 0x15
    201e:	7e 89       	ldd	r23, Y+22	; 0x16
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	4c f5       	brge	.+82     	; 0x2086 <main+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	69 8d       	ldd	r22, Y+25	; 0x19
    2036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9c 8b       	std	Y+20, r25	; 0x14
    205a:	8b 8b       	std	Y+19, r24	; 0x13
    205c:	0f c0       	rjmp	.+30     	; 0x207c <main+0x510>
    205e:	80 e9       	ldi	r24, 0x90	; 144
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	9a 8b       	std	Y+18, r25	; 0x12
    2064:	89 8b       	std	Y+17, r24	; 0x11
    2066:	89 89       	ldd	r24, Y+17	; 0x11
    2068:	9a 89       	ldd	r25, Y+18	; 0x12
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <main+0x4fe>
    206e:	9a 8b       	std	Y+18, r25	; 0x12
    2070:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	9c 8b       	std	Y+20, r25	; 0x14
    207a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8b 89       	ldd	r24, Y+19	; 0x13
    207e:	9c 89       	ldd	r25, Y+20	; 0x14
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <main+0x4f2>
    2084:	95 c0       	rjmp	.+298    	; 0x21b0 <main+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	6d 89       	ldd	r22, Y+21	; 0x15
    2088:	7e 89       	ldd	r23, Y+22	; 0x16
    208a:	8f 89       	ldd	r24, Y+23	; 0x17
    208c:	98 8d       	ldd	r25, Y+24	; 0x18
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9c 8b       	std	Y+20, r25	; 0x14
    2098:	8b 8b       	std	Y+19, r24	; 0x13
    209a:	8b 89       	ldd	r24, Y+19	; 0x13
    209c:	9c 89       	ldd	r25, Y+20	; 0x14
    209e:	98 8b       	std	Y+16, r25	; 0x10
    20a0:	8f 87       	std	Y+15, r24	; 0x0f
    20a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a4:	98 89       	ldd	r25, Y+16	; 0x10
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <main+0x53a>
    20aa:	98 8b       	std	Y+16, r25	; 0x10
    20ac:	8f 87       	std	Y+15, r24	; 0x0f
    20ae:	80 c0       	rjmp	.+256    	; 0x21b0 <main+0x644>
				_delay_ms(25);
				while(enable == 1)
				{
					turn_Off_Cooling_Element();
    20b0:	0e 94 e7 10 	call	0x21ce	; 0x21ce <turn_Off_Cooling_Element>
					turn_Off_Heating_Element();
    20b4:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <turn_Off_Heating_Element>
					if(DIO_u8GetPinValue(0,7) == 1)
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	67 e0       	ldi	r22, 0x07	; 7
    20bc:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_u8GetPinValue>
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	09 f0       	breq	.+2      	; 0x20c6 <main+0x55a>
    20c4:	75 c0       	rjmp	.+234    	; 0x21b0 <main+0x644>
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	a8 ec       	ldi	r26, 0xC8	; 200
    20cc:	b1 e4       	ldi	r27, 0x41	; 65
    20ce:	8b 87       	std	Y+11, r24	; 0x0b
    20d0:	9c 87       	std	Y+12, r25	; 0x0c
    20d2:	ad 87       	std	Y+13, r26	; 0x0d
    20d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20da:	8d 85       	ldd	r24, Y+13	; 0x0d
    20dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	4a e7       	ldi	r20, 0x7A	; 122
    20e4:	55 e4       	ldi	r21, 0x45	; 69
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	8f 83       	std	Y+7, r24	; 0x07
    20f0:	98 87       	std	Y+8, r25	; 0x08
    20f2:	a9 87       	std	Y+9, r26	; 0x09
    20f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20f6:	6f 81       	ldd	r22, Y+7	; 0x07
    20f8:	78 85       	ldd	r23, Y+8	; 0x08
    20fa:	89 85       	ldd	r24, Y+9	; 0x09
    20fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e8       	ldi	r20, 0x80	; 128
    2104:	5f e3       	ldi	r21, 0x3F	; 63
    2106:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    210a:	88 23       	and	r24, r24
    210c:	2c f4       	brge	.+10     	; 0x2118 <main+0x5ac>
		__ticks = 1;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9e 83       	std	Y+6, r25	; 0x06
    2114:	8d 83       	std	Y+5, r24	; 0x05
    2116:	3f c0       	rjmp	.+126    	; 0x2196 <main+0x62a>
	else if (__tmp > 65535)
    2118:	6f 81       	ldd	r22, Y+7	; 0x07
    211a:	78 85       	ldd	r23, Y+8	; 0x08
    211c:	89 85       	ldd	r24, Y+9	; 0x09
    211e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	3f ef       	ldi	r19, 0xFF	; 255
    2124:	4f e7       	ldi	r20, 0x7F	; 127
    2126:	57 e4       	ldi	r21, 0x47	; 71
    2128:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    212c:	18 16       	cp	r1, r24
    212e:	4c f5       	brge	.+82     	; 0x2182 <main+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2130:	6b 85       	ldd	r22, Y+11	; 0x0b
    2132:	7c 85       	ldd	r23, Y+12	; 0x0c
    2134:	8d 85       	ldd	r24, Y+13	; 0x0d
    2136:	9e 85       	ldd	r25, Y+14	; 0x0e
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e2       	ldi	r20, 0x20	; 32
    213e:	51 e4       	ldi	r21, 0x41	; 65
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	bc 01       	movw	r22, r24
    214a:	cd 01       	movw	r24, r26
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	8d 83       	std	Y+5, r24	; 0x05
    2158:	0f c0       	rjmp	.+30     	; 0x2178 <main+0x60c>
    215a:	80 e9       	ldi	r24, 0x90	; 144
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	9c 83       	std	Y+4, r25	; 0x04
    2160:	8b 83       	std	Y+3, r24	; 0x03
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <main+0x5fa>
    216a:	9c 83       	std	Y+4, r25	; 0x04
    216c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	9e 81       	ldd	r25, Y+6	; 0x06
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	9e 83       	std	Y+6, r25	; 0x06
    2176:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2178:	8d 81       	ldd	r24, Y+5	; 0x05
    217a:	9e 81       	ldd	r25, Y+6	; 0x06
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	69 f7       	brne	.-38     	; 0x215a <main+0x5ee>
    2180:	14 c0       	rjmp	.+40     	; 0x21aa <main+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2182:	6f 81       	ldd	r22, Y+7	; 0x07
    2184:	78 85       	ldd	r23, Y+8	; 0x08
    2186:	89 85       	ldd	r24, Y+9	; 0x09
    2188:	9a 85       	ldd	r25, Y+10	; 0x0a
    218a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	9e 83       	std	Y+6, r25	; 0x06
    2194:	8d 83       	std	Y+5, r24	; 0x05
    2196:	8d 81       	ldd	r24, Y+5	; 0x05
    2198:	9e 81       	ldd	r25, Y+6	; 0x06
    219a:	9a 83       	std	Y+2, r25	; 0x02
    219c:	89 83       	std	Y+1, r24	; 0x01
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <main+0x636>
    21a6:	9a 83       	std	Y+2, r25	; 0x02
    21a8:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(25);
						enable = 0;
    21aa:	1a ae       	std	Y+58, r1	; 0x3a
    21ac:	19 ae       	std	Y+57, r1	; 0x39
    21ae:	06 c0       	rjmp	.+12     	; 0x21bc <main+0x650>
			if(DIO_u8GetPinValue(0,7) == 1)
			{
				turn_Off_Cooling_Element();
				turn_Off_Heating_Element();
				_delay_ms(25);
				while(enable == 1)
    21b0:	89 ad       	ldd	r24, Y+57	; 0x39
    21b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    21b4:	81 30       	cpi	r24, 0x01	; 1
    21b6:	91 05       	cpc	r25, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <main+0x650>
    21ba:	7a cf       	rjmp	.-268    	; 0x20b0 <main+0x544>
						_delay_ms(25);
						enable = 0;
						break;
					}
				}
				counter = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9c af       	std	Y+60, r25	; 0x3c
    21c2:	8b af       	std	Y+59, r24	; 0x3b
				enable = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9a af       	std	Y+58, r25	; 0x3a
    21ca:	89 af       	std	Y+57, r24	; 0x39
    21cc:	86 cd       	rjmp	.-1268   	; 0x1cda <main+0x16e>

000021ce <turn_Off_Cooling_Element>:

	}

}
void turn_Off_Cooling_Element()
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinVlaue(1,0,0);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
}
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <turn_Off_Heating_Element>:
void turn_Off_Heating_Element()
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinVlaue(2,0,0);
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
}
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <turn_On_Heating_Element>:
void turn_On_Heating_Element()
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinVlaue(2,0,1);
    2206:	82 e0       	ldi	r24, 0x02	; 2
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
}
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <turn_On_Cooling_Element>:
void turn_On_Cooling_Element()
{
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinVlaue(1,0,1);
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	41 e0       	ldi	r20, 0x01	; 1
    2224:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinVlaue>
}
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <get_Temperature>:
u16 get_Temperature()
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
	return (ADC_u16StartConversion(1));
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	0e 94 b3 09 	call	0x1366	; 0x1366 <ADC_u16StartConversion>
}
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <__udivmodqi4>:
    2242:	99 1b       	sub	r25, r25
    2244:	79 e0       	ldi	r23, 0x09	; 9
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <__udivmodqi4_ep>

00002248 <__udivmodqi4_loop>:
    2248:	99 1f       	adc	r25, r25
    224a:	96 17       	cp	r25, r22
    224c:	08 f0       	brcs	.+2      	; 0x2250 <__udivmodqi4_ep>
    224e:	96 1b       	sub	r25, r22

00002250 <__udivmodqi4_ep>:
    2250:	88 1f       	adc	r24, r24
    2252:	7a 95       	dec	r23
    2254:	c9 f7       	brne	.-14     	; 0x2248 <__udivmodqi4_loop>
    2256:	80 95       	com	r24
    2258:	08 95       	ret

0000225a <__udivmodhi4>:
    225a:	aa 1b       	sub	r26, r26
    225c:	bb 1b       	sub	r27, r27
    225e:	51 e1       	ldi	r21, 0x11	; 17
    2260:	07 c0       	rjmp	.+14     	; 0x2270 <__udivmodhi4_ep>

00002262 <__udivmodhi4_loop>:
    2262:	aa 1f       	adc	r26, r26
    2264:	bb 1f       	adc	r27, r27
    2266:	a6 17       	cp	r26, r22
    2268:	b7 07       	cpc	r27, r23
    226a:	10 f0       	brcs	.+4      	; 0x2270 <__udivmodhi4_ep>
    226c:	a6 1b       	sub	r26, r22
    226e:	b7 0b       	sbc	r27, r23

00002270 <__udivmodhi4_ep>:
    2270:	88 1f       	adc	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	5a 95       	dec	r21
    2276:	a9 f7       	brne	.-22     	; 0x2262 <__udivmodhi4_loop>
    2278:	80 95       	com	r24
    227a:	90 95       	com	r25
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	08 95       	ret

00002282 <__prologue_saves__>:
    2282:	2f 92       	push	r2
    2284:	3f 92       	push	r3
    2286:	4f 92       	push	r4
    2288:	5f 92       	push	r5
    228a:	6f 92       	push	r6
    228c:	7f 92       	push	r7
    228e:	8f 92       	push	r8
    2290:	9f 92       	push	r9
    2292:	af 92       	push	r10
    2294:	bf 92       	push	r11
    2296:	cf 92       	push	r12
    2298:	df 92       	push	r13
    229a:	ef 92       	push	r14
    229c:	ff 92       	push	r15
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	ca 1b       	sub	r28, r26
    22ac:	db 0b       	sbc	r29, r27
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	09 94       	ijmp

000022ba <__epilogue_restores__>:
    22ba:	2a 88       	ldd	r2, Y+18	; 0x12
    22bc:	39 88       	ldd	r3, Y+17	; 0x11
    22be:	48 88       	ldd	r4, Y+16	; 0x10
    22c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    22c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    22c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    22c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    22c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    22ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    22cc:	b9 84       	ldd	r11, Y+9	; 0x09
    22ce:	c8 84       	ldd	r12, Y+8	; 0x08
    22d0:	df 80       	ldd	r13, Y+7	; 0x07
    22d2:	ee 80       	ldd	r14, Y+6	; 0x06
    22d4:	fd 80       	ldd	r15, Y+5	; 0x05
    22d6:	0c 81       	ldd	r16, Y+4	; 0x04
    22d8:	1b 81       	ldd	r17, Y+3	; 0x03
    22da:	aa 81       	ldd	r26, Y+2	; 0x02
    22dc:	b9 81       	ldd	r27, Y+1	; 0x01
    22de:	ce 0f       	add	r28, r30
    22e0:	d1 1d       	adc	r29, r1
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	ed 01       	movw	r28, r26
    22ee:	08 95       	ret

000022f0 <_exit>:
    22f0:	f8 94       	cli

000022f2 <__stop_program>:
    22f2:	ff cf       	rjmp	.-2      	; 0x22f2 <__stop_program>
